{"version":3,"sources":["util/fetch-mbta.ts","Store.tsx","components/RouteButton.tsx","hooks/useLocalStorage.ts","components/Settings.tsx","util/date.ts","util/service.ts","components/Services.tsx","components/Analysis.tsx","components/Messages.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["fetchMBTA","path","fetch","process","headers","saveInitialData","newState","window","localStorage","setItem","JSON","stringify","parsedStoredState","storedState","getItem","parse","fetchInitialData","initialState","routes","loading","error","storeEnhancer","ReduxQuerySync","enhancer","params","selector","state","action","value","type","payload","defaultValue","initialTruth","store","createStore","route","filter","routeId","RouteButton","checked","attributes","color","text_color","short_name","long_name","style","backgroundColor","name","dispatch","useDispatch","changeRoute","useCallback","id","className","onClick","readOnly","abbr","replace","includes","toLowerCase","trim","charAt","split","substr","abbreviate","useLocalStorage","key","initialValue","useState","setValue","newValue","stringified","useEffect","handleStorage","event","addEventListener","removeEventListener","parsedValue","Settings","setRoutes","selectedRouteIDs","useSelector","a","res","json","data","fetchData","routeGroups","reduce","acc","push","selectedRoutes","otherRoutes","data-toggle","data-target","aria-expanded","aria-controls","map","dateText","d","date","Date","isNaN","getTime","toLocaleDateString","month","day","dateRange","start","end","join","typicality","t","ServiceCard","service","rating_start_date","rating_end_date","rating_description","schedule_typicality","schedule_type","valid_days","schedule_name","start_date","end_date","added_dates","length","i","added_dates_notes","removed_dates","removed_dates_notes","routeIDs","setServices","sort","response","newServices","Services","services","fetchIt","today","serviceDateRanges","index","x","y","ratingDateRanges","TypicalityLabel","props","icon","datum","dy","fontSize","Analysis","padding","top","left","right","bottom","domain","width","scale","stroke","strokeWidth","labels","labelComponent","renderInPortal","dx","textAnchor","fill","fontFamily","offsetY","axis","ticks","strokeOpacity","tickLabels","tickCount","tickFormat","dateRanges","s","role","Loading","Error","NoData","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.09bb2604.chunk.js","sourcesContent":["import { State } from \"../Store\";\n\nexport default function fetchMBTA(path: string) {\n  return fetch(`${process.env.REACT_APP_API_URL}${path}`, {\n    headers: \n      [['x-api-key', `${process.env.REACT_APP_API_KEY}`]],\n  })\n}\n\nexport function fetchInitialData() {\n  const storedState: string | null = window.localStorage.getItem('mbta-service-exp--state');\n  const parsedStoredState: State | null = storedState ? JSON.parse(storedState) : null;\n  return parsedStoredState;\n}\n\nexport function saveInitialData(newState: State) {\n  window.localStorage.setItem('mbta-service-exp--state', JSON.stringify(newState));\n}","import { Reducer, createStore, Store } from \"redux\";\nimport ReduxQuerySync from 'redux-query-sync';\nimport { fetchInitialData, saveInitialData } from \"./util/fetch-mbta\";\n\nexport interface State {\n  routes: string[] | null;\n  loading: boolean;\n  error: string | null;\n}\n\nconst parsedStoredState: State | null = fetchInitialData();\n\nconst initialState: State = parsedStoredState ? parsedStoredState : {\n  routes: [\"Red\", \"39\"],\n  loading: true,\n  error: null\n}\n\ntype ActionType = \"START_LOAD\" | \"END_LOAD\" | \"SET_ERROR\" | \"INCLUDE_ROUTE\" | \"EXCLUDE_ROUTE\" | \"SET_ROUTES\";\n\ninterface ActionPayload { route: string; routes: string[], error: string | null }\n\ninterface Action {\n  type: ActionType;\n  payload: Partial<ActionPayload>;\n}\n\nconst reducer: Reducer<State, Action> = (\n  state = initialState,\n  action: Action\n): State => {\n  let newState: State = { ...state };\n  let { routes, route, error } = action.payload || {};\n  switch (action.type) {\n    case \"START_LOAD\":\n      newState = {\n        ...newState,\n        loading: true\n      }\n      break;\n    case \"END_LOAD\":\n      newState = {\n        ...newState,\n        loading: false\n      }\n      break;\n    case \"SET_ERROR\":\n      newState = {\n        ...newState,\n        loading: false,\n        error: error ? error : state.error\n      }\n      break;\n    case \"INCLUDE_ROUTE\":\n      newState = {\n        ...newState,\n        routes: route && newState.routes ? [\n          ...newState.routes,\n          route\n        ] : state.routes\n      }\n      break;\n    case \"EXCLUDE_ROUTE\":\n      newState = {\n        ...newState,\n        routes: newState.routes ? [\n          ...newState.routes.filter(routeId => routeId !== route)\n        ] : []\n      }\n      break;\n    case \"SET_ROUTES\":\n      newState = {\n        ...newState,\n        routes: routes ? routes : []\n      }\n      break;\n    default:\n      break;\n  }\n\n  saveInitialData(newState);\n  return newState;\n};\n\nconst storeEnhancer = ReduxQuerySync.enhancer({\n  params: {\n    routes: {\n      selector: (state: State) => state.routes,\n      action: (value: Action) => ({ type: 'setPageNumber', payload: value }),\n      defaultValue: initialState.routes,\n    }\n  },\n  initialTruth: \"store\"\n});\n\nexport const store: Store = createStore(reducer, initialState, storeEnhancer);","import React, { useCallback } from 'react';\nimport { Route } from './Settings';\nimport { useDispatch } from 'react-redux';\n\nconst abbreviate = (name: string): string => {\n  let abbr = name.replace(/(line|trolley|pilot|ferry|event service)/ig, '');\n\n  if ([\"red\",\"mattapan\",\"orange\",\"blue\"].includes(abbr.toLowerCase().trim())) {\n    return abbr.charAt(0);\n  }\n\n  if (abbr.split(\" \")[0].toLowerCase() === \"green\") {\n    return abbr.split(\" \")[2]\n  }\n\n  return abbr.trim().substr(0,4);\n}\n\nconst RouteButton = ({ route, checked }: { route: Route, checked: boolean }) => {\n  const {\n    color,\n    text_color,\n    type,\n    short_name,\n    long_name\n  } = route.attributes;\n  const style = { \n    backgroundColor: `#${color}`, \n    color: `#${text_color}` \n  }\n  const name = type === 3 ?  short_name : long_name;\n  const dispatch = useDispatch();\n  const changeRoute = useCallback(() => {\n    const type = checked ? \"EXCLUDE_ROUTE\" : \"INCLUDE_ROUTE\";\n    dispatch({ type, payload: { route: route.id }})\n  }, [checked])\n\n  return (\n    <label className=\"badge badge-pill btn btn__route\" style={style} onClick={changeRoute}>\n      <input type=\"checkbox\" name={route.id} id={route.id} checked={checked} readOnly />\n      {abbreviate(name)}\n      {checked && \" ⓧ\"}\n    </label>\n  )\n}\n\nexport default RouteButton;","import { Dispatch, useCallback, useEffect, useState } from 'react';\n\nexport default function useLocalStorage(\n  key: string,\n  initialValue: string = ''\n): [any, Dispatch<string>] {\n  const [value, setValue] = useState(\n    () => window.localStorage.getItem(key) || initialValue\n  );\n\n  const setItem = (newValue: any) => {\n    const stringified = JSON.stringify(newValue)\n    setValue(stringified);\n    window.localStorage.setItem(key, stringified);\n  };\n\n  useEffect(() => {\n    const newValue = window.localStorage.getItem(key);\n    if (value !== newValue) {\n      setValue(newValue || initialValue);\n    }\n  }, [initialValue, key, value]);\n\n  const handleStorage = useCallback(\n    (event: StorageEvent) => {\n      if (event.key === key && event.newValue !== value) {\n        setValue(event.newValue || initialValue);\n      }\n    },\n    [initialValue, key, value]\n  );\n\n  useEffect(() => {\n    window.addEventListener('storage', handleStorage);\n    return () => window.removeEventListener('storage', handleStorage);\n  }, [handleStorage]);\n\n  const parsedValue = value ? JSON.parse(value) : \"\";\n  return [parsedValue, setItem];\n}","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, { ReactElement, useEffect } from 'react';\nimport RouteButton from './RouteButton';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { State } from '../Store';\nimport fetchMBTA from '../util/fetch-mbta';\n\ntype RouteType = 0 | 1 | 2 | 3 | 4 | 5;\ninterface RouteAttributes {\n  color: string;\n  text_color: string;\n  type: RouteType;\n  short_name: string;\n  long_name: string;\n}\nexport interface Route {\n  id: string;\n  attributes: RouteAttributes;\n}\n\nconst Settings = (): ReactElement | null => {\n  const [routes, setRoutes] = useLocalStorage(\"mbta-service-exp--allRoutes\");\n  const selectedRouteIDs = useSelector((store: State) => store.routes);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const res = await fetchMBTA(\"/routes\");\n        const json = await res.json();\n        setRoutes(json.data);\n        dispatch({ type: \"SET_ERROR\", payload: { error: null } })\n      } catch (error) {\n        dispatch({ type: \"SET_ERROR\", payload: { error: error } })\n      }\n    };\n  \n    if (!routes) {\n      fetchData();\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [routes]);\n\n  if (!routes) {\n    return null;\n  }\n\n  \n  const routeGroups = routes.reduce((acc: { selectedRoutes: Route[], otherRoutes: Route[] }, route: Route) => {\n    if (selectedRouteIDs && selectedRouteIDs.includes(route.id)) {\n      acc[\"selectedRoutes\"].push(route);\n    } else {\n      acc[\"otherRoutes\"].push(route);\n    }\n    return acc;\n  }, {\n    selectedRoutes: [],\n    otherRoutes: []\n  });\n\n  return <>\n    <a data-toggle=\"collapse\" data-target=\"#more-routes\" aria-expanded=\"false\" aria-controls=\"more-routes\">\n      Show/hide more routes\n    </a>\n    <div className=\"btn-group-toggle btn-group__routes\">\n      {routeGroups[\"selectedRoutes\"].map((route: Route) => (\n        <RouteButton key={route.id} checked={true} route={route} />\n      ))}\n    </div>\n\n    <div id=\"more-routes\" className=\"collapse btn-group-toggle btn-group__routes\">\n      <hr />\n      {routeGroups[\"otherRoutes\"].map((route: Route) => (\n        <RouteButton key={route.id} checked={false} route={route} />\n      ))}\n    </div>\n  </>\n}\n\nexport default Settings;","\nexport const dateText = (d: string): string => {\n  const date = new Date(`${d}T01:00:00`);\n  return !isNaN(date.getTime()) ? date.toLocaleDateString('en-US', { month: 'short', day: '2-digit' }) : \"?\";\n}\n\nexport const dateRange = (start: string, end: string): string =>\n  [start, end].map(dateText).join(\"—\");","// [\"❓unknown\",\"✅typical\",\"⭐️extra\",\"🎁holiday\",\"⚠️planned disruption\",\"🚨unplanned disruption\"]\nexport const typicality = (t: number): string =>\n  [\"❓ \", \"✅ \", \"⭐️ \", \"🎁 \", \"⚠️ \", \"🚨 \"][t];\n\nexport interface Service {\n  id: string;\n  added_dates: string[];\n  added_dates_notes: string[];\n  description: string;\n  end_date: string;\n  rating_description: string;\n  rating_end_date: string;\n  rating_start_date: string;\n  removed_dates: string[];\n  removed_dates_notes: string[];\n  schedule_name: string;\n  schedule_type: string;\n  schedule_typicality: number;\n  start_date: string;\n  valid_days: number[];\n}","import React, { ReactElement, useEffect, Dispatch } from 'react';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport fetchMBTA from '../util/fetch-mbta';\nimport { dateRange, dateText } from '../util/date';\nimport { typicality, Service } from '../util/service';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { State } from '../Store';\n\nconst ServiceCard = ({ id, service }: { id: string, service: Service }): ReactElement => {\n  return (\n    <div className=\"service border-primary-lightest-contrast\">\n      <header className=\"rating\">\n        {dateRange(service.rating_start_date, service.rating_end_date)}\n        <span className=\"float-right\">{service.rating_description}</span>\n      </header>\n\n      <div>\n        {typicality(service.schedule_typicality)}\n        <span className=\"badge badge-secondary\">{service.schedule_type} [{service.valid_days.join(\", \")}]</span>\n      </div>\n\n      <header className=\"mt-2\">\n        <span className=\"text-uppercase font-weight-bold\">{service.schedule_name}</span>\n        <br />\n        {dateRange(service.start_date, service.end_date)}\n      </header>\n\n\n      {service.added_dates.length > 0 && (\n        <div className=\"added-dates\">\n          {service.added_dates.map((d, i) => \n            <div key={d} className=\"text-success\">\n              ⊕ {dateText(d)} {service.added_dates_notes[i]}\n            </div>\n          )}\n        </div>\n      )}\n\n      {service.removed_dates.length > 0 && (\n        <div className=\"removed-dates\">\n          {service.removed_dates.map((d, i) =>\n            <div key={d} className=\"text-danger\">\n              ⊖ {dateText(d)} {service.removed_dates_notes[i]}\n            </div>\n          )}\n        </div>\n      )}  \n\n      <footer className=\"text-muted small\">\n        {id}\n      </footer>\n    </div>\n  )\n}\n\nasync function fetchIt(routeIDs: string[], setServices: React.Dispatch<string>, dispatch: Dispatch<any>) {\n  dispatch({ type: \"START_LOAD\" })\n  try {\n    const response = await fetchMBTA(`/services?filter%5Broute%5D=${routeIDs.sort().join(\",\")}`)\n    const { data: newServices } = await response.json();\n    setServices(newServices);\n    dispatch({ type: \"SET_ERROR\", payload: { error: null } })\n  } catch (error) {\n    dispatch({ type: \"SET_ERROR\", payload: { error: error } })\n  }\n}\n\nconst Services = (): ReactElement => {\n  const dispatch = useDispatch();\n  const routeIDs = useSelector((store: State) => store.routes);\n  const routesQuery = routeIDs ? routeIDs.sort().join(\"-\") : \"\";\n  const [services, setServices] = useLocalStorage(routesQuery);\n\n  useEffect(() => {\n    if (services === \"\" && routeIDs) {\n      fetchIt(routeIDs, setServices, dispatch)\n    }\n  }, [services, routeIDs, setServices, dispatch]);\n  \n  return <div className=\"services-wrapper\">\n    {!!services && services.map((service: any, i: number) =>\n      <ServiceCard key={`${service.id}-${i}`} id={service.id} service={service.attributes} />\n    )}\n  </div>\n}\n\nexport default Services;","import React, { ReactElement } from 'react';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { useSelector } from 'react-redux';\nimport { VictoryChart, VictoryAxis, VictoryLine, VictoryLabel } from 'victory';\nimport { State } from '../Store';\nimport { typicality, Service } from '../util/service';\n\nconst today = new Date();\n\nconst serviceDateRanges = (service: Service, index: number) => {\n  const { start_date, end_date } = service;\n  return [start_date, end_date].map(date => {\n    const x = date ? new Date(`${date}T01:00:00`) : new Date(\"2020-09-30T01:00:00\");\n    return {\n      y: index,\n      x,\n      service\n    }\n  })\n}\n\nconst ratingDateRanges = (service: Service, index: number) => {\n  const { rating_start_date, rating_end_date } = service;\n  return [rating_start_date, rating_end_date].map(date => {\n    const x = date ? new Date(`${date}T01:00:00`) : new Date(\"2020-09-30T01:00:00\");\n    return {\n      ...service,\n      y: index,\n      x,\n    }\n  })\n}\n\nconst TypicalityLabel = (props: any): JSX.Element | null => {\n  if (props.index === \"0\") {\n    const icon = typicality(props.datum.schedule_typicality)\n    return (\n      <g>\n        <text x={props.x} y={props.y} dy={4} fontSize={10} >\n          <tspan>{icon}</tspan>\n        </text>\n      </g>\n    );\n  }\n  return null;\n};\n\nconst dateRanges = (services: Service[]) => {\n  return <VictoryChart \n  padding={{ top: 0, left: 20, right: 20, bottom: 30 }} domain={{y: [-1, services.length]}} width={1000} scale={{ x: \"time\" }} >\n    {services.map(ratingDateRanges).map((data, i) => <VictoryLine\n      key={i}\n      style={{\n        data: { stroke: \"#e2ecf9\", strokeWidth: 10 }\n      }}\n      data={data}\n      labels={({ datum }) => datum.schedule_typicality}\n      labelComponent={<TypicalityLabel />}\n    />)}\n    {services.map(serviceDateRanges).map((data, i) => (\n        <VictoryLine\n          key={i}\n          style={{\n            data: { strokeWidth: 3 }\n          }}\n          data={data}\n        />\n      ))}\n\n    <VictoryLine\n      labels={[\"Today\"]}\n      labelComponent={<VictoryLabel renderInPortal y={8-services.length} dx={-2} dy={4} textAnchor=\"start\" />}\n      style={{\n        data: { stroke: \"red\", strokeWidth: 1 },\n        labels: {\n          fill: \"red\",\n          fontSize: 8,\n          fontFamily: \"Inter\"\n        }\n      }}\n      data={[{\n        x: today,\n        y: -1\n      },{\n        x: today,\n        y: services.length\n      }]}\n    />\n\n    <VictoryAxis offsetY={30} \n    style={{\n      axis: {strokeWidth: 0},\n      ticks: {stroke: \"black\",\n      strokeOpacity: 1},\n      tickLabels: {fontSize: 10, padding: 2, fontFamily: \"Inter\"}\n    }}\n    tickCount={8}\n    tickFormat={x => x.toLocaleDateString('en-US', { month: 'short', day: '2-digit' })} />\n  </VictoryChart>\n}\n\n// TODO: does not rerender with new services. Does show on refresh though\nconst Analysis = (): ReactElement => {\n  const routeIDs = useSelector((store: State) => store.routes);\n  const routesQuery = routeIDs ? routeIDs.sort().join(\"-\") : \"\";\n  const [services] = useLocalStorage(routesQuery, \"\");\n\n  return services ? (\n    <section>\n      <small>Summary <span className=\"badge badge-primary ml-2\">{services.length} services</span></small>\n      <div>\n        {dateRanges(services.map((s: any) => s.attributes))}\n      </div>\n    </section>\n  ) : (\n      <div className=\"alert alert-warning mb-0 small\" role=\"alert\">\n        Make sure at least one route is selected, or try refreshing the page.\n      </div>\n    )\n}\n\nexport default Analysis;","import React from \"react\"\n\nconst Loading = (): JSX.Element => <div className=\"spinner-grow text-primary\" role=\"status\">\n<span className=\"sr-only\">Loading...</span>\n</div>\n\nconst Error = ({ error }: {error: any}): JSX.Element => <div className=\"alert alert-danger\" role=\"alert\">\n  <h4 className=\"alert-heading\">Something went wrong</h4>\n  <hr />\n  <p className=\"mb-0\">{error}</p>\n</div>\n\nconst NoData = (): JSX.Element => <div className=\"alert alert-warning\" role=\"alert\">\n  <h4 className=\"alert-heading\">No data found</h4>\n  <p>Select some routes, maybe?</p>\n</div>\nexport { Loading, Error, NoData }","import React from 'react';\nimport './App.scss';\nimport Settings from './components/Settings'\nimport Services from './components/Services';\nimport Analysis from './components/Analysis';\nimport { useSelector } from 'react-redux';\nimport { State } from './Store';\nimport { Loading, Error, NoData } from './components/Messages';\n\nfunction App() {\n  const loading = useSelector((store: State) => store.loading)\n  const error = useSelector((store: State) => store.error)\n  const routes = useSelector((store: State) => store.routes)\n  \n  return (\n    <div className=\"app grid-wrapper\">\n      <header>\n        <h1 className=\"title\"><strong>MBTA</strong> Services Explorer</h1>\n        <p className=\"small\">Explore way too many services at once.</p>\n      </header>\n      <section>\n        <small>Routes</small>\n        <Settings />\n      </section>\n      {loading \n      ? <Loading /> \n      : (error ? <Error error={error} /> : (routes && routes.length ? <>\n        <Analysis />\n        <main>\n          <small>Services</small>\n          <Services />\n        </main>\n      </> : <NoData />))\n      }\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './Store';\nimport 'bootstrap'; // or...\n// import 'bootstrap/js/dist/util';\n// import 'bootstrap/js/dist/alert';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n     <Provider store={store}>\n      <App />\n     </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}